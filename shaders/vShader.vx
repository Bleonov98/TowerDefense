#version 400 core

layout(location = 0) in vec3 pos;
layout(location = 1) in vec3 norm;
layout(location = 2) in vec2 tex;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec3 bitangent;
layout(location = 5) in vec3 col;
layout(location = 6) in ivec4 boneIds; 
layout(location = 7) in vec4 weights;
layout(location = 8) in mat4 instanceMat;

uniform bool animated;
uniform bool instanced;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;

const int MAX_BONES = 100;
const int MAX_BONE_INFLUENCE = 4;
uniform mat4 finalBonesMatrices[MAX_BONES];

out vec2 TexCoords;
out vec3 Colours;

out vec3 fragPos;
out vec3 normalVec;

void main()
{
    if (animated) {
        vec4 totalPosition = vec4(0.0f);
        vec3 localNormal = vec3(0.0f);

        for(int i = 0; i < MAX_BONE_INFLUENCE; i++)
        {
            if(boneIds[i] == -1) 
                continue;
            if(boneIds[i] >= MAX_BONES) 
            {
                totalPosition = vec4(pos,1.0f);
                break;
            }
            vec4 localPosition = finalBonesMatrices[boneIds[i]] * vec4(pos,1.0f);
            totalPosition += localPosition * weights[i];
            localNormal += mat3(finalBonesMatrices[boneIds[i]]) * norm * weights[i];
        }

        normalVec = mat3(transpose(inverse(model))) * localNormal;

        if (instanced) fragPos = vec3(instanceMat * totalPosition);
        else fragPos = vec3(model * totalPosition);
    } 
    else {
        normalVec = mat3(transpose(inverse(model))) * norm;
        
        if (instanced) fragPos = vec3(instanceMat * vec4(pos, 1.0f));
        else fragPos = vec3(model * vec4(pos, 1.0f));
    }

    gl_Position = projection * view * vec4(fragPos, 1.0);

    TexCoords = tex;
    Colours = col;
}
