#version 400 core
out vec4 FragColor;

in vec2 TexCoords;
in vec3 Colours;

in vec3 fragPos;
in vec3 normalVec;

uniform sampler2D texture_diffuse1;
uniform bool useTexture;
uniform float transparency;

uniform vec3 lightPos;
uniform vec3 lightColour;

void main()
{   
    vec3 viewPos = vec3(0.0f, 8.0f, 12.0f);

    // ambient
    float ambientStrength = 0.8;
    vec3 ambient = ambientStrength * lightColour;

    // diffuse
    vec3 norm = normalize(normalVec);
    vec3 lightDir = normalize(lightPos - fragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColour;

    // specular
    float specularStrength = 0.8f;
    vec3 viewDir = normalize(viewPos - fragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * lightColour;  

    // Calculate final color
    vec3 lighting = (ambient + diffuse + specular);
    vec3 finalColor;

    if (useTexture) {
        vec4 texColor = texture(texture_diffuse1, TexCoords);
        finalColor = texColor.rgb * Colours * lighting;
        FragColor = vec4(finalColor, texColor.a * (1.0f - transparency));
    } 
    else {
        finalColor = Colours * lighting;
        FragColor = vec4(finalColor, 1.0f - transparency);
    }
}